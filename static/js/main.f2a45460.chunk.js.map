{"version":3,"sources":["App.module.scss","Components/Gallery/Gallery.module.scss","Components/Loader/Loader.module.scss","Components/Header/Header.module.scss","Context/Context.js","Api/Config.js","Components/Gallery/NoImages.jsx","Components/Gallery/Gallery.jsx","Components/Loader/Loader.jsx","Components/Container/Container.jsx","Components/Header/Form.jsx","Components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","PhotoContext","createContext","PhotoContextProvider","props","useState","images","setImages","loading","setLoadting","Provider","value","fetchImages","query","axios","get","then","response","data","photos","photo","catch","error","console","log","children","NoImages","memo","length","className","ClassNames","ImagesList","map","image","farm","server","id","secret","title","url","key","src","alt","Loader","Container","searchTerm","useContext","useEffect","Form","handleSubmit","setSearchTerm","onSubmit","e","onChange","target","type","required","Input","placeholder","Button","disabled","trim","height","width","d","fill","fillRule","ButtonsContainer","element","index","onClick","handleClick","Header","App","classNames","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f2a45460.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3M5AB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImagesList\":\"Gallery_ImagesList__1STBV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__3PnTS\",\"load4\":\"Loader_load4__Wa8Ft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__14Z4f\",\"Input\":\"Header_Input__1XwI5\",\"Button\":\"Header_Button__2PcB0\",\"ButtonsContainer\":\"Header_ButtonsContainer__2jHeq\"};","import apikey from \"../Api/Config\";\r\nimport axios from \"axios\";\r\n\r\nimport React, { createContext, useState } from \"react\";\r\n\r\nexport const PhotoContext = createContext();\r\n\r\nconst PhotoContextProvider = props => {\r\n\r\n    const [images, setImages] = useState([]);\r\n    const [loading, setLoadting] = useState(true);\r\n\r\n    const fetchImages = query => {\r\n        axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apikey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\r\n        .then(response => {\r\n            setImages(response?.data?.photos.photo)\r\n        }).catch(error => {\r\n            console.log(\"THe Error\", error);\r\n        }).then(function () {\r\n            setLoadting(false);\r\n        })\r\n    };\r\n    return (\r\n        <PhotoContext.Provider value={{ images, loading, fetchImages }}>\r\n            {props.children}\r\n        </PhotoContext.Provider>\r\n    )\r\n}\r\nexport default PhotoContextProvider;","const apiKey = \"636e1481b4f3c446d26b8eb6ebfe7127\";\r\n\r\nexport default apiKey;","import React from 'react'\r\n\r\nconst NoImages = () =>{\r\n    return [\r\n        <h2>No Images Found</h2>,\r\n        <p>Please try a different search term</p>\r\n    ]\r\n}\r\n\r\nexport default NoImages","import React, { memo } from 'react'\r\nimport ClassNames from \"./Gallery.module.scss\";\r\nimport NoImages from './NoImages';\r\n\r\nconst Gallery = ({ data }) => (\r\n    data.length > 0 ? \r\n        <ul className={ClassNames.ImagesList}>\r\n            {data.map((image) => {\r\n                const { farm, server, id, secret, title } = image;\r\n                let url = `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}_m.jpg`;\r\n\r\n                return <li key={id}><img src={url} alt={title} /></li>;\r\n            })}\r\n        </ul>: <NoImages />\r\n)\r\n\r\nexport default memo(Gallery)","import React from 'react'\r\nimport ClassNames from \"./Loader.module.scss\";\r\nconst  Loader = ()=> <div className={ClassNames.Loader} />\r\nexport default Loader","import React, { useContext, useEffect } from 'react'\r\n\r\nimport { PhotoContext } from '../../Context/Context'\r\nimport Gallery from '../Gallery/Gallery';\r\nimport Loader from '../Loader/Loader';\r\n\r\nconst  Container = ({ searchTerm })=> {\r\n\r\n    const { images, loading, fetchImages } = useContext(PhotoContext);\r\n\r\n    useEffect(() => {\r\n        fetchImages(searchTerm ? searchTerm : \"mountain\");\r\n    }, [searchTerm]);\r\n    \r\n    return loading ?  <Loader /> :  <Gallery data={images} />\r\n}\r\n\r\nexport default Container;","import React, { useState } from 'react'\r\nimport ClassNames from \"./Header.module.scss\";\r\n\r\nconst Form = ({ handleSubmit }) => {\r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n    const handleChange = (e) => {\r\n        setSearchTerm(e.target.value)\r\n    }\r\n\r\n    const handleClick = (e, searchTerm) => {\r\n        handleSubmit(e, searchTerm);\r\n    }\r\n\r\n    const Buttons = [\"Mountains\", \"Beaches\", \"Birds\", \"Food\"]\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e, searchTerm)}>\r\n            <input\r\n                onChange={handleChange}\r\n                value={searchTerm}\r\n                type=\"text\"\r\n                required\r\n                className={ClassNames.Input}\r\n                placeholder=\"Search .... \"\r\n            />\r\n            <button className={ClassNames.Button} type=\"submit\" disabled={!searchTerm.trim()}>\r\n                <svg\r\n                    height=\"32\"\r\n                    width=\"32\">\r\n                    <path\r\n                        d=\"M19.427 21.427a8.5 8.5 0 1 1 2-2l5.585 5.585c.55.55.546 1.43 0 1.976l-.024.024a1.399 1.399 0 0 1-1.976 0l-5.585-5.585zM14.5 21a6.5 6.5 0 1 0 0-13 6.5 6.5 0 0 0 0 13z\"\r\n                        fill={\"#ffffff\"}\r\n                        fillRule=\"evenodd\">\r\n                    </path>\r\n                </svg>\r\n            </button>\r\n\r\n            {/* Starting the Ready Made Buttons */}\r\n\r\n            <div className={ClassNames.ButtonsContainer}>\r\n                {Buttons.map((element, index) => {\r\n                    return <button key={index} onClick={(e) => handleClick(e, element)}>{element}</button>\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default Form;","import React from 'react'\r\nimport Form from './Form';\r\nimport ClassNames from \"./Header.module.scss\";\r\n\r\nconst Header =({ handleSubmit })=> {\r\n\r\n    return (\r\n        <div className={ClassNames.Header}>\r\n            <h1>SnapShot</h1>\r\n            <Form handleSubmit={handleSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState } from 'react';\nimport classNames from './App.module.scss';\nimport Container from './Components/Container/Container';\nimport Header from './Components/Header/Header';\nimport PhotoContextProvider from './Context/Context';\n\nconst App = () => {\n\n  const [searchTerm, setSearchTerm] = useState(null);\n\n  const handleSubmit = (e, value) => {\n    e.preventDefault();\n    setSearchTerm(value);\n  }\n\n  return (\n    <div className={classNames.App}>\n      <PhotoContextProvider>\n        <Header handleSubmit={handleSubmit} />\n        <Container searchTerm={searchTerm} />\n      </PhotoContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}